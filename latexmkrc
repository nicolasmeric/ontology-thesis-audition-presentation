# This shows how to use lualatex (http://en.wikipedia.org/wiki/LuaTeX)
# with latexmk.
#
#   WARNING: The method shown here is suitable only for ver. 4.51 and
#            later of latexmk, not for earlier versions.
#

$pdf_mode = 4;
#$lualatex = "lualatex --synctex=1 %O %S";
# Use shell-escape option,
# This option is required by minted package
# or svg package with inkscape option.
$lualatex = "lualatex --synctex=1 %O --shell-escape %S";
$postscript_mode = $dvi_mode = 0;

# This method is suitable for latexmk 4.41
#$pdflatex = "lualatex --synctex=1 %O %S";
#$pdflatex = "pdflatex -synctex=1 %O %S";
#$pdf_mode = 1;
#$postscript_mode = $dvi_mode = 0;

@default_files = ("ontolotogy_thesis_audition_presentation.tex");
$do_cd = 1;

# Handle glossary
# example taken from latexmk example_rcfiles:
# https://ctan.org/tex-archive/support/latexmk/example_rcfiles
# http://mirrors.ctan.org/support/latexmk/example_rcfiles/glossary_latexmkrc
# and from:
# https://tex.stackexchange.com/questions/1226/
# how-to-make-latexmk-use-makeglossaries/44316#44316

add_cus_dep('glo', 'gls', 0, 'makeglossaries');
add_cus_dep('acn', 'acr', 0, 'makeglossaries');

sub makeglossaries {
  my ($base_name, $path) = fileparse( $_[0] );
  pushd $path;
  my $return = system "makeglossaries $base_name";
  popd;
  return $return;
}

push @generated_exts, 'glo', 'gls', 'glg', 'glsdefs';
push @generated_exts, 'acn', 'acr', 'alg';
# If glossaries package is configured to use xindy
push @generated_exts, 'xdy';


# Enable bbl file, generated by biblatex, to be deleted
$bibtex_use = 2;
# Handle logreq files:
# logreq is called by biblatex
push @generated_exts, 'run.xml';

# Handle minitoc auxiliary files
# the list is obtained from minitoc pdf guide, page 55, table 1.11
push @generated_exts, 'maf', 'mtc', 'ptc[0-9]*', 'pl[ft][0-9]*', 'mtc[0-9]*',
                      'ml[ft][0-9]*', 'stc[0-9]*', 'sl[ft][0-9]*';

# Handle beamer auxiliary files

# See list in the following file:
# https://github.com/github/gitignore/blob/master/TeX.gitignore
push @generated_exts, 'nav', 'snm';

# ∙ fragile=singleslide tells beamer that the frame contents is "fragile."
# This means that the frame contains text that is not "interpreted as usual."
# For example, this applies to verbatim text,
# which is, obviously, interpreted somewhat differently from normal text.
# If a frame contains fragile text,
# different internal mechanisms are used to typeset the frame
# to ensure that inside the frame the character codes can be reset.
# The price of switching to another internal mechanism is
# that either you cannot use overlays or
# an external file needs to be written and read back
# (which is not always desirable).
# In detail,
# the following happens when this option is given for normal (pdf)LATEX:
# The contents of the frame is scanned and then written to
# a special file named ⟨jobname⟩.vrb or,
# if a label has been assigned to the frame,
# ⟨jobname⟩.⟨current frame number⟩.vrb.
# Then, the frame is started anew and
# the content of this file is read back.
# Since, upon reading of a file, the character codes can be modified,
# this allows you to use both verbatim text and overlays.
# To determine the end of the frame, the following rule is used:
# The first occurrence of a single line containing
# exactly \end{⟨frame environment name⟩} ends the frame.
# The ⟨environment name⟩ is normally frame,
# but it can be changed using the environment option.
# This special rule is needed since the frame contents is,
# after all, not interpreted when it is gathered.
# You can also add the optional information =singleslide.
# This tells beamer that the frame contains only a single slide.
# In this case, the frame contents is not written to a special file,
# but interpreted directly, which is "faster and cleaner."
# See beamer documentation file beameruserguide.pdf,
# version 3.55, section 8.1, page 61.
push @generated_exts, 'vrb';

# clean extra aux files: synctex aux file
$clean_ext = "%R.synctex.gz";
